error = mean(pruebas.compra != prediccion.compra)
error
prediccion.compra = knn(entrenamiento.datos, pruebas.datos, entrenamiento.compra, k=5)
#calculo del error
error = mean(pruebas.compra != prediccion.compra)
error #11% de error para k= 1
prediccion.compra = knn(entrenamiento.datos, pruebas.datos, entrenamiento.compra, k=5)
#calculo del error
error = mean(pruebas.compra != prediccion.compra)
error #11% de error para k= 1
#para obtener el k-optimo hacemos un recorrido 1:20 para ver cual es el optimo
for (i in 1:20) {
set.seed(90)
prediccion.compra = knn(entrenamiento.datos, pruebas.datos, entrenamiento.compra, k=i)
error[i] = mean(pruebas.compra != prediccion.compra)
}
valores.k = 1:20
tabla.errores = as.data.frame(valores.k, errores)
tabla.errores
valores.k = 1:20
tabla.errores = data.frame(valores.k, errores)
tabla.errores = data.frame(errores, valores.k)
tabla.errores = data.frame(valores.k, error)
tabla.errores
"A partir de un conjunto de datos se realiza la categorizacion
de un conjunto de condiciones que ocurren de forma sucesiva
para resolver un problema"
library(rpart)
datos = kyphosis
datos
str(datos)
arbol = rpart(kyphosis, datos)
arbol
printcp(arbol)
plot(arbol, uniform = TRUE, main='arbol de decision')
text(arbol, use.n = TRUE, all=TRUE)
library(rpart.plot)
install.packages(rpart.plot)
install.packages('rpart.plot')
library(rpart.plot)
prp(arbol)
library(randomForest)
install.packages('randomForest')
library(randomForest)
modelo = randomForest(kyphosis ~. , data= datos)
modelo = randomForest(kyphosis ~ . , data=datos)
modelo = randomForest(Kyphosis ~ . , data=datos)
modelo
arbol
modelo$predicted
library(ISLR)
datos = iris
install.packages('e1071')
library(e1071)
help('svr')
help('svm')
modelo = svm(Species ~ . , dato = datos)
library(ISLR)
datos = iris
str(datos)
modelo = svm(Species ~ . , dato = datos)
modelo = svm(Species ~. , dato = datos)
modelo = svm(Species ~ . , dato=datos)
model <- svm(Species ~ ., data = iris)
modelo = svm(Species ~ ., dato=datos)
modelo = svm(Species ~ ., dato=datos)
datos = iris
modelo = svm(Species ~ ., dato=datos)
modelo = svm(Species ~ ., data=iris)
modelo = svm(Species ~ ., data = datos)
predicciones = predict(modelo, datos[1:4])
predicciones
tabla = as.data.frame(datos, predicciones)
tabla = data.frame(datos, predicciones)
tabla
library(ISLR)
datos = iris
str(datos)
library(ggplot2)
grafico = ggplot(datos, aes(Petal.Length, Petal.Width, color=Species))
grafico = grafico + geom_point(size= 2)
print(grafico)
set.seed(90)
conjuntos = kmeans(datos[,1:4], 3, nstart = 20)
print (conjuntos)
table(conjuntos$cluster, datos$Species)
clusplot(datos, conjuntos$cluster, color=TRUE, shape= TRUE, labels= 0)
clusplot(datos, conjuntos$cluster, color=TRUE, shape= TRUE, labels= 0, lines=1)
library(cluster)
clusplot(datos, conjuntos$cluster, color=TRUE, shape= TRUE, labels= 0, lines=1)
clusplot(datos, conjuntos$cluster, color=TRUE, shape= TRUE, labels= 0, lines=0)
clusplot(datos, conjuntos$cluster, color=TRUE, shape= TRUE, labels= 0, lines=0)
install.packages("MASS")
library(MASS)
datos = Boston
head(datos)
any(is.na(datos))
maximo = apply(datos,2,max)
minimo = apply(datos,2,min)
minimo
maximo = apply(datos,2,max)
minimo = apply(datos,2,min)
#normalizacion de datos
datos.normalizados = scale(datos,center = minimo, scale=maximo-minimo)
datos.normalizados = as.data.frame(datos.normalizados)
head(datos.normalizados)
library(caTools)
division = sample.split(datos.normalizados$medv, SplitRatio = 0.7) #rango del 0.7
division = sample.split(datos.normalizados$medv, SplitRatio = 0.7) #rango del 0.7
entrenamiento = subset(datos.normalizados, division = TRUE)
pruebas = subset(datos.normalizados, division= FALSE)
division = sample.split(datos.normalizados$medv, SplitRatio = 0.7) #rango del 0.7
entrenamiento = subset(datos.normalizados, division == TRUE)
pruebas = subset(datos.normalizados, division== FALSE)
install.packages("neuralnet")
head(pruebas)
formula = medv ~ crim + zn + chas + nox +  rm + age +dis + rad+ tax + ptratio + black + lstat
red.neuronal= neuralnet(formula, data= entrenamiento, hidden=c(5,3), linear.output = TRUE)
library(neuralnet)
neuralnet
red.neuronal= neuralnet(formula, data= entrenamiento, hidden=c(5,3), linear.output = TRUE)
plot(red.neuronal)
predicciones = compute(red.neuronal, pruebas[1:13])
str(predicciones)
predicciones.correctas = predicciones$net.result * (max(datos$medv) -min(datos$medv)) + min(datos$medv) )
predicciones.correctas = predicciones$net.result * (max(datos$medv) - min(datos$medv)) + min(datos$medv)
pruebas.correctas = (pruebas$medv) * (max(datos$medv) - min(datos$medv)) + min(datos$medv)
error = sum((pruebas.correctas - predicciones.correctas) ^ 2) /nrows (pruebas)
error = sum((pruebas.correctas - predicciones.correctas) ^ 2) /nrow (pruebas)
error
predicciones.correctas = predicciones$net.result * (max(datos$medv) - min(datos$medv)) + min(datos$medv)
pruebas.convertidas = (pruebas$medv) * (max(datos$medv) - min(datos$medv)) + min(datos$medv)
#calculo del error
error = sum((pruebas.convertidas - predicciones.correctas) ^ 2) /nrow (pruebas)
error #error del 14%
#dataset para compara el valor real y el valor prediccion
errores = data.frame(pruebas.convertidas, predicciones.correctas)
head(errores)
library(ggplot2)
grafico = ggplot(errores, aes(x= pruebas.convertidas, y=predicciones.correctas))
grafico = grafico + geom_boxplot()
#un grafica para esta comparacion
library(ggplot2)
grafico = ggplot(errores, aes(x= pruebas.convertidas, y=predicciones.correctas))
grafico = grafico + geom_point()
#un grafica para esta comparacion
library(ggplot2)
grafico = ggplot(errores, aes(x= pruebas.convertidas, y=predicciones.correctas))
grafico = grafico + geom_point()
print(grafico)
install.packages('ggplotmovies')
library(ggplot2)
library(ggplotmovies)
install.packages('ggplot2movies')
library(ggplot2movies)
head(peliculas)
peliculas = movies
head(peliculas)
peliculas[c('title','year','rating')]
grafico = ggplot(peliculas, aes(x= rating))
grafico = datos + geom_histogram()
#titulos
peliculas[c('title','year','rating')]
grafico = ggplot(peliculas, aes(x= rating))
grafico = datos + geom_histogram()
peliculas[c('title','year','rating')]
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram()
print (grafico)
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3)
print (grafico)
#grafico mas estrecho
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green')
print (grafico)
#grafico mas estrecho y color
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='red')
print (grafico)
#grafico mas estrecho y color
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue')
print (grafico)
#grafico mas estrecho y color
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue')
print (grafico)
#titulos y suvidad = alpha
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue', alpha(0.3))
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue', alpha= 0.3)
print (grafico)
#titulos y suvidad = alpha
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue', alpha= 0.3)
grafico = grafico + xlab('Puntuacion ') +ylab('frecuencia') + ggtitle('histograma')
print (grafico)
#titulos y suvidad = alpha, nombres a filas y columnas
grafico = ggplot(peliculas, aes(x= rating))
grafico = grafico + geom_histogram(binwidth = .3, color ='green', fill='blue', alpha= 0.3)
grafico = grafico + xlab('Puntuacion ') +ylab('frecuencia') + ggtitle('histograma')
print (grafico)
library(ggplot2)
coches = mtcars
head(coches)
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point()
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point()
print(grafico)
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=8, alpha= .3)
print(grafico)
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=8, alpha= .3, color=#d6fa95)
print(grafico)
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=8, alpha= .3, color='#d6fa95')
print(grafico)
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=8, alpha= .3, color='#d6fa11')
print(grafico)
#plot
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=wt, alpha= .3, color='#d6fa11')
grafico = ggplot(coches, aes(x=disp, y= gear))
grafico = grafico + geom_point(size=8, alpha= .3, color='#d6fa11')
grafico = grafico + geom_point(aes(size=wt))
print(grafico)
grafico = ggplot(coches, aes(x=disp, y= mpg))
#color en funcion a otra columna
grafico = grafico + geom_point(size= 8, aes(color=hp))
grafico = ggplot(coches, aes(x=disp, y= mpg))
#color en funcion a otra columna
grafico = grafico + geom_point(size= 8, aes(color=hp))
print(grafico)
#
#manejo de gradientes
grafico = ggplot(coches, aes(x=disp, y= mpg))
#color en funcion a otra columna
grafico = grafico + geom_point(size= 8, aes(color=hp))
#degraddo de color por la variable hp
grafico = grafico + scale_color_gradient(low= 'blue', high='red')
print(grafico)
library(ggplot2)
datos = mpg
head(mpg)
str(datos)
#plot para datos dicretos o caracteristicas
grafico = ggplot(datos, aes(x=class))
grafico = grafico + geom_bar()
#plot para datos dicretos o caracteristicas
grafico = ggplot(datos, aes(x=class))
grafico = grafico + geom_bar()
print(grafico)
#plot para datos dicretos o caracteristicas
grafico = ggplot(datos, aes(x=class))
grafico = grafico + geom_bar(color='red', fill= 'cian')
print(grafico)
#plot para datos dicretos o caracteristicas
grafico = ggplot(datos, aes(x=class))
grafico = grafico + geom_bar(color='red', fill= 'yellow')
print(grafico)
grafico = grafico + geom_bar(aes(fill=drv))
print(grafico)
library(ggplot2)
datos = mtcars
head(datos)
factor(cyl)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot()
datos = mtcars
head(datos)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot()
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill=factor(cyl))
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
print(grafico)
#permoite ver los atipicos que estan fuera de
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl))
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_bw()
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_bw()
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_dark()
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_bk()
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_classic ()
print(grafico)
grafico = ggplot(datos, aes(x= factor(cyl), y=mpg))
grafico = grafico + geom_boxplot(fill='blue')
# en funcion a otra variable
grafico = grafico + geom_boxplot(aes(fill=factor(cyl)))
# ajustando el fondo
grafico = grafico + theme_economist()
print(grafico)
library(ggplot2)
library(ggplot2movies)
peliculas = movies
head(peliculas)
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale()
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale()
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale_fill_gradient2(low='green', high='yellow')
print (grafico)
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale_fill_gradient2(low='yellow', high='blue')
print (grafico)
grafico = ggplot(peliculas, aes(x=year, y=r6))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale_fill_gradient2(low='yellow', high='blue')
print (grafico)
grafico = ggplot(peliculas, aes(x=year, y=votes))
grafico = grafico + geom_bin2d()
print(grafico)
#ajuste color con grdiente
grafico = grafico + scale_fill_gradient2(low='yellow', high='blue')
print (grafico)
grafico = ggplot(peliculas, aes(x=year, y=rating))
grafico = grafico + geom_bin2d()
print(grafico)
#ejemplo de densidad
grafico = ggplot(peliculas, aes(x=year, y=rating))
grafico = grafico + geom_density2d()
print(grafico)
#ejemplo de densidad
grafico = ggplot(peliculas, aes(x=year, y=rating))
grafico = grafico + geom_density2d()
grafico = grafico + scale_fill_gradient2(low='yellow', high='blue')
print(grafico)
library(ggplot2)
datos = mpg
head(datos)
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
print(graficos)
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
print(graficos)
#recortando una zona del grafico
graficos = graficos + coord_cartesian(xlim = c(3,5),ylim = c(25,27))
print(graficos)
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
print(graficos)
graficos = graficos + coord_cartesian(xlim = c(3,5),ylim = c(5,20))
print(graficos)
#cambio de dimensiones del grafico
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = 1/2)
print(graficos)
#cambio de dimensiones del grafico
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = 1/1.2)
print(graficos)
#cambio de dimensiones del grafico
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = 1/.5)
print(graficos)
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = 1/1)
print(graficos)
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = .1/1)
print(graficos)
#cambio de dimensiones del grafico
graficos = ggplot(datos, aes(x=displ, y=cty))
graficos = graficos + geom_point()
#ratio = x/y que indica la relacion de x y
graficos = graficos + coord_fixed(ratio = .2/1)
print(graficos)
install.packages('plotly')
library(plotly)
library(plotly)
library(ggplot2)
datos = mtcars
head(datos)
graficos = ggplot(datos, aes(mpg, wt))
graficos = graficos + geom_point()
print(graficos)
#ggploty amplia los detalles del grafico al mousemove
grafico2 = ggplotly(grafico)
#ggploty amplia los detalles del grafico al mousemove
grafico2 = ggplotly(graficos)
print (grafico2)
head(datos)
datos = mtcars
head(datos)
slice(datos, 3:5)
slice(datos, 13:15)
arrange(datos, mpg hp,wt)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
arrange(datos, mpg hp,wt)
head(datos)
#filter
filter(datos, mpg= 21)
filter(datos, mpg= 21.0, vs= 1)
filter(datos, mpg== 21.0, vs== 1)
filter(datos, mpg== 21.0, vs== 0)
arrange(datos, mpg hp,wt)
#arrange - toma unas columnas
arrange(datos, mpg, hp,wt)
select(datos, mpg, hp,qsec)
arrange(datos, mpg, hp,desc(wt))
arrange(datos, mpg, hp,desc(drat))
arrange(datos, desc(drat))
arrange(datos, desc(drat), mpg)
rename (datos, millas = mpg )
distinct (select(datos, millas))
distinct (select(datos, mpg))
summarise(datos, media = mean (mpg, na.rm = TRUE))
sample(datos, 20)
#mostrar datos aleatorios del dataset
sample_n(datos, 20)
resultado = arrange(sample_n(filter(datos,mpg >0)))
#seleccionando con aletoriedad
resultado = arrange(sample_n(filter(datos,mpg >0), size=5))
resultado
#seleccionando con aletoriedad 5 filas donde mpg > 20
resultado = arrange(sample_n(filter(datos,mpg >20), size=5))
resultado
#seleccionando con aletoriedad 5 filas donde mpg > 20
resultado = arrange(sample_n(filter(datos,mpg >20), size=5),desc(mpg))
resultado
library(data.table)
library(tidyr)
datos = data.frame(columna=c('1,2', '3,4','1,9'))
datos
datos = separate(datos, columna, c('c1', 'c2')
datos
datos = separate(datos, columna, c('c1', 'c2'))
datos
datos2 = unite(datos2, columna, c1,c2,sep='*')
#unite -- une 2 columnas por un char
datos = unite(datos, columna, c1,c2,sep='*')
datos
